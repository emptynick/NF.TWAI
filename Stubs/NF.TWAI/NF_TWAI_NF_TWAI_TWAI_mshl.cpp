//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------

#include "NF_TWAI.h"
#include "NF_TWAI_NF_TWAI_TWAI.h"

using namespace NF_TWAI::NF_TWAI;


HRESULT Library_NF_TWAI_NF_TWAI_TWAI::NativeTwaiInstall___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        signed int retValue = TWAI::NativeTwaiInstall(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_NF_TWAI_NF_TWAI_TWAI::NativeTwaiUninstall___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        signed int retValue = TWAI::NativeTwaiUninstall(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_NF_TWAI_NF_TWAI_TWAI::NativeTwaiStart___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        signed int retValue = TWAI::NativeTwaiStart(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_NF_TWAI_NF_TWAI_TWAI::NativeTwaiStop___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        signed int retValue = TWAI::NativeTwaiStop(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_NF_TWAI_NF_TWAI_TWAI::NativeTwaiX___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        signed int retValue = TWAI::NativeTwaiX(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_NF_TWAI_NF_TWAI_TWAI::NativeTwaiY___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        signed int retValue = TWAI::NativeTwaiY(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}
